"""
Main script to run both tasks for Homework 7
"""

import sys
import os
from task1 import main as task1_main
from task2 import main as task2_main


def run_task1():
    """Run Task 1: LRU Cache optimization"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ó–∞–≤–¥–∞–Ω–Ω—è 1")
    print()
    try:
        task1_main()
        print("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è 1 —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ!")
        return True
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ó–∞–≤–¥–∞–Ω–Ω—ñ 1: {e}")
        return False


def run_task2():
    """Run Task 2: Fibonacci comparison"""
    print("\n" + "="*80)
    print("üöÄ –ó–∞–ø—É—Å–∫ –ó–∞–≤–¥–∞–Ω–Ω—è 2")
    print()
    try:
        task2_main()
        print("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è 2 —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ!")
        return True
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ó–∞–≤–¥–∞–Ω–Ω—ñ 2: {e}")
        return False


def main():
    """Main function to run both tasks"""
    print("–î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è 7: –ê–ª–≥–æ—Ä–∏—Ç–º–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–µ—à–µ–º")
    print("="*80)
    print("–í–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–≤–æ—Ö –∑–∞–≤–¥–∞–Ω—å:")
    print("1. –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –¥–æ—Å—Ç—É–ø—É –¥–æ –¥–∞–Ω–∏—Ö –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é LRU-–∫–µ—à—É")
    print("2. –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —á–∏—Å–µ–ª –§—ñ–±–æ–Ω–∞—á—á—ñ")
    print("="*80)
    
    # Track success
    task1_success = False
    task2_success = False
    
    # Run Task 1
    task1_success = run_task1()
    
    # Run Task 2 only if Task 1 succeeded or user wants to continue
    if task1_success:
        task2_success = run_task2()
    else:
        print("\n–ë–∞–∂–∞—î—Ç–µ –≤—Å–µ –æ–¥–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ –ó–∞–≤–¥–∞–Ω–Ω—è 2? (y/n): ", end="")
        choice = input().lower().strip()
        if choice in ['y', 'yes', '—Ç–∞–∫', '—Ç']:
            task2_success = run_task2()
    
    # Final summary
    print("\n" + "="*80)
    print("–ü–Ü–î–°–£–ú–û–ö –í–ò–ö–û–ù–ê–ù–ù–Ø")
    print("="*80)
    print(f"–ó–∞–≤–¥–∞–Ω–Ω—è 1 (LRU Cache): {'‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ' if task1_success else '‚ùå –ü–æ–º–∏–ª–∫–∞'}")
    print(f"–ó–∞–≤–¥–∞–Ω–Ω—è 2 (Fibonacci): {'‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ' if task2_success else '‚ùå –ü–æ–º–∏–ª–∫–∞'}")
    
    if task1_success and task2_success:
        print("\nüéâ –í—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω—ñ!")
        print("\n–§–∞–π–ª–∏ —Å—Ç–≤–æ—Ä–µ–Ω—ñ:")
        print("- fibonacci_comparison.png (–≥—Ä–∞—Ñ—ñ–∫ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è)")
        print("- –í—Å—ñ –º–æ–¥—É–ª—ñ —Ç–∞ —Ç–µ—Å—Ç–∏")
    elif task1_success or task2_success:
        print("\n‚ö†Ô∏è  –ß–∞—Å—Ç–∫–æ–≤–æ –≤–∏–∫–æ–Ω–∞–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ–º–∏–ª–∫–∏ –≤–∏—â–µ.")
    else:
        print("\nüí• –ü–æ–º–∏–ª–∫–∏ –≤ –æ–±–æ—Ö –∑–∞–≤–¥–∞–Ω–Ω—è—Ö. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
    
    print("\n–î–ª—è –∑–∞–ø—É—Å–∫—É –æ–∫—Ä–µ–º–∏—Ö –∑–∞–≤–¥–∞–Ω—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:")
    print("- python task1.py")
    print("- python task2.py")
    print("\n–î–ª—è –∑–∞–ø—É—Å–∫—É —Ç–µ—Å—Ç—ñ–≤:")
    print("- python test_task1.py")
    print("- python test_task2.py")


if __name__ == "__main__":
    main()
