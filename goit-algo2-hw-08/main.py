"""
Main script to run both tasks for Homework 8

This script demonstrates both rate limiting algorithms:
1. Sliding Window Rate Limiter
2. Throttling Rate Limiter
"""

import sys
import time
from task1 import test_rate_limiter as test_sliding_window
from task2 import test_throttling_limiter


def run_task1():
    """Run Task 1: Sliding Window Rate Limiter"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ó–∞–≤–¥–∞–Ω–Ω—è 1: Sliding Window Rate Limiter")
    print("=" * 60)
    try:
        test_sliding_window()
        print("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è 1 —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ!")
        return True
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ó–∞–≤–¥–∞–Ω–Ω—ñ 1: {e}")
        import traceback
        traceback.print_exc()
        return False


def run_task2():
    """Run Task 2: Throttling Rate Limiter"""
    print("\n" + "üöÄ –ó–∞–ø—É—Å–∫ –ó–∞–≤–¥–∞–Ω–Ω—è 2: Throttling Rate Limiter")
    print("=" * 60)
    try:
        test_throttling_limiter()
        print("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è 2 —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ!")
        return True
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ó–∞–≤–¥–∞–Ω–Ω—ñ 2: {e}")
        import traceback
        traceback.print_exc()
        return False


def compare_algorithms():
    """Compare both algorithms side by side"""
    print("\n" + "üîÑ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤")
    print("=" * 60)
    
    print("\nüìä –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –ê–õ–ì–û–†–ò–¢–ú–Ü–í:")
    print("=" * 40)
    
    print("SLIDING WINDOW:")
    print("‚úì –¢–æ—á–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞–ø–∏—Ç—ñ–≤ —É —á–∞—Å–æ–≤–æ–º—É –≤—ñ–∫–Ω—ñ")
    print("‚úì –î–æ–∑–≤–æ–ª—è—î –ø–∞–∫–µ—Ç–Ω—ñ –∑–∞–ø–∏—Ç–∏ –¥–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—É")
    print("‚úì –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –∑–∞–ø–∏—Å—ñ–≤")
    print("‚úì –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –ø–∞–º'—è—Ç—ñ: O(n) –¥–µ n - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤ —É –≤—ñ–∫–Ω—ñ")
    print("‚úì –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å —á–∞—Å—É: O(1) –∞–º–æ—Ä—Ç–∏–∑–æ–≤–∞–Ω–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü—ñ–π")
    
    print("\nTHROTTLING:")
    print("‚úì –§—ñ–∫—Å–æ–≤–∞–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏")
    print("‚úì –ü—Ä–æ—Å—Ç—ñ—à–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞ –º–µ–Ω—à–µ –ø–∞–º'—è—Ç—ñ")
    print("‚úì –ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–∏–π –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª")
    print("‚úì –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –ø–∞–º'—è—Ç—ñ: O(1) –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    print("‚úì –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å —á–∞—Å—É: O(1) –¥–ª—è –≤—Å—ñ—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π")
    
    print("\nüéØ –ö–û–õ–ò –í–ò–ö–û–†–ò–°–¢–û–í–£–í–ê–¢–ò:")
    print("=" * 30)
    
    print("SLIDING WINDOW - –∫–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ:")
    print("‚Ä¢ –¢–æ—á–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞–ø–∏—Ç—ñ–≤")
    print("‚Ä¢ –î–æ–∑–≤–æ–ª–∏—Ç–∏ '–ø–∞–∫–µ—Ç–∏' –∑–∞–ø–∏—Ç—ñ–≤")
    print("‚Ä¢ –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª —Ä–µ—Å—É—Ä—Å—ñ–≤")
    print("‚Ä¢ API rate limiting –∑ —Ç–æ—á–Ω–∏–º–∏ –ª—ñ–º—ñ—Ç–∞–º–∏")
    
    print("\nTHROTTLING - –∫–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ:")
    print("‚Ä¢ –†—ñ–≤–Ω–æ–º—ñ—Ä–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è")
    print("‚Ä¢ –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è —Å–ø–∞–º—É –≤ —á–∞—Ç–∞—Ö")
    print("‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å —á–∞—Å—Ç–æ—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
    print("‚Ä¢ –ú–µ–Ω—à–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ")
    
    # Practical demonstration
    print("\nüß™ –ü–†–ê–ö–¢–ò–ß–ù–ê –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –†–Ü–ó–ù–ò–¶–Ü:")
    print("=" * 45)
    
    from task1 import SlidingWindowRateLimiter
    from task2 import ThrottlingRateLimiter
    
    # Create both limiters with equivalent settings
    sliding = SlidingWindowRateLimiter(window_size=10, max_requests=1)
    throttling = ThrottlingRateLimiter(min_interval=10.0)
    
    print("\n–°—Ü–µ–Ω–∞—Ä—ñ–π: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—Å–∏–ª–∞—î 3 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ–¥—Ä—è–¥")
    
    # Test scenario: 3 rapid messages
    print("\nSLIDING WINDOW —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
    for i in range(3):
        result = sliding.record_message("demo_user")
        wait_time = sliding.time_until_next_allowed("demo_user")
        print(f"  –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {i+1}: {'‚úì' if result else '√ó'} "
              f"(–æ—á—ñ–∫—É–≤–∞–Ω–Ω—è: {wait_time:.1f}—Å)")
        time.sleep(0.1)  # Small delay
    
    print("\nTHROTTLING —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
    for i in range(3):
        result = throttling.record_message("demo_user")
        wait_time = throttling.time_until_next_allowed("demo_user")
        print(f"  –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {i+1}: {'‚úì' if result else '√ó'} "
              f"(–æ—á—ñ–∫—É–≤–∞–Ω–Ω—è: {wait_time:.1f}—Å)")
        time.sleep(0.1)  # Small delay


def run_tests():
    """Run unit tests for both tasks"""
    print("\n" + "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤")
    print("=" * 30)
    
    import subprocess
    import os
    
    try:
        print("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Task 1...")
        result1 = subprocess.run([
            sys.executable, "test_task1.py"
        ], capture_output=True, text=True, cwd=os.getcwd())
        
        if result1.returncode == 0:
            print("‚úÖ –¢–µ—Å—Ç–∏ Task 1 –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ")
        else:
            print("‚ùå –ü–æ–º–∏–ª–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö Task 1:")
            print(result1.stderr)
        
        print("\n–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Task 2...")
        result2 = subprocess.run([
            sys.executable, "test_task2.py"
        ], capture_output=True, text=True, cwd=os.getcwd())
        
        if result2.returncode == 0:
            print("‚úÖ –¢–µ—Å—Ç–∏ Task 2 –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ")
        else:
            print("‚ùå –ü–æ–º–∏–ª–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö Task 2:")
            print(result2.stderr)
            
        return result1.returncode == 0 and result2.returncode == 0
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É —Ç–µ—Å—Ç—ñ–≤: {e}")
        return False


def interactive_demo():
    """Interactive demonstration of both algorithms"""
    print("\n" + "üéÆ –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è")
    print("=" * 40)
    
    from task1 import SlidingWindowRateLimiter
    from task2 import ThrottlingRateLimiter
    
    sliding = SlidingWindowRateLimiter(window_size=5, max_requests=2)
    throttling = ThrottlingRateLimiter(min_interval=3.0)
    
    print("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó:")
    print("‚Ä¢ Sliding Window: 5 —Å–µ–∫—É–Ω–¥, –º–∞–∫—Å–∏–º—É–º 2 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
    print("‚Ä¢ Throttling: 3 —Å–µ–∫—É–Ω–¥–∏ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏")
    print("\n–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∞–±–æ 'quit' –¥–ª—è –≤–∏—Ö–æ–¥—É):")
    
    try:
        while True:
            user_input = input("\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ID: ").strip()
            
            if user_input.lower() in ['quit', 'exit', 'q']:
                break
            
            if not user_input:
                continue
            
            # Test both algorithms
            sliding_result = sliding.record_message(user_input)
            sliding_wait = sliding.time_until_next_allowed(user_input)
            
            throttling_result = throttling.record_message(user_input)
            throttling_wait = throttling.time_until_next_allowed(user_input)
            
            print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ '{user_input}':")
            print(f"Sliding Window: {'‚úì' if sliding_result else '√ó'} "
                  f"(–æ—á—ñ–∫—É–≤–∞–Ω–Ω—è: {sliding_wait:.1f}—Å)")
            print(f"Throttling:     {'‚úì' if throttling_result else '√ó'} "
                  f"(–æ—á—ñ–∫—É–≤–∞–Ω–Ω—è: {throttling_wait:.1f}—Å)")
    
    except KeyboardInterrupt:
        print("\n\n–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")


def main():
    """Main function to run both tasks and demonstrations"""
    print("–î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è 8: –ê–ª–≥–æ—Ä–∏—Ç–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª—é –ø–æ—Ç–æ–∫—É —Ç–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ")
    print("=" * 80)
    print("–†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ—Ö–∞–Ω—ñ–∑–º—ñ–≤ –æ–±–º–µ–∂–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É —á–∞—Ç-—Å–∏—Å—Ç–µ–º—ñ")
    print("1. Sliding Window Rate Limiter - —Ç–æ—á–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å —á–∞—Å–æ–≤–∏—Ö —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤")
    print("2. Throttling Rate Limiter - —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏")
    print("=" * 80)
    
    # Track success
    task1_success = False
    task2_success = False
    
    # Run Task 1
    task1_success = run_task1()
    
    # Small delay between tasks
    time.sleep(1)
    
    # Run Task 2
    task2_success = run_task2()
    
    # Compare algorithms
    compare_algorithms()
    
    # Run tests
    print("\n" + "=" * 80)
    tests_success = run_tests()
    
    # Final summary
    print("\n" + "=" * 80)
    print("–ü–Ü–î–°–£–ú–û–ö –í–ò–ö–û–ù–ê–ù–ù–Ø")
    print("=" * 80)
    print(f"–ó–∞–≤–¥–∞–Ω–Ω—è 1 (Sliding Window): {'‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ' if task1_success else '‚ùå –ü–æ–º–∏–ª–∫–∞'}")
    print(f"–ó–∞–≤–¥–∞–Ω–Ω—è 2 (Throttling):    {'‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ' if task2_success else '‚ùå –ü–æ–º–∏–ª–∫–∞'}")
    print(f"–¢–µ—Å—Ç–∏:                      {'‚úÖ –ü—Ä–æ–π—à–ª–∏' if tests_success else '‚ùå –ü–æ–º–∏–ª–∫–∏'}")
    
    if task1_success and task2_success and tests_success:
        print("\nüéâ –í—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω—ñ!")
        print("\n–î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:")
        print("- python task1.py (–æ–∫—Ä–µ–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è 1)")
        print("- python task2.py (–æ–∫—Ä–µ–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è 2)")
        print("- python test_task1.py (—Ç–µ—Å—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è 1)")
        print("- python test_task2.py (—Ç–µ—Å—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è 2)")
        
        # Offer interactive demo
        print("\n–ë–∞–∂–∞—î—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—é? (y/n): ", end="")
        try:
            choice = input().lower().strip()
            if choice in ['y', 'yes', '—Ç–∞–∫', '—Ç']:
                interactive_demo()
        except (EOFError, KeyboardInterrupt):
            print("\n–í–∏—Ö—ñ–¥ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏.")
            
    elif task1_success or task2_success:
        print("\n‚ö†Ô∏è –ß–∞—Å—Ç–∫–æ–≤–æ –≤–∏–∫–æ–Ω–∞–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ–º–∏–ª–∫–∏ –≤–∏—â–µ.")
    else:
        print("\nüí• –ü–æ–º–∏–ª–∫–∏ –≤ –æ–±–æ—Ö –∑–∞–≤–¥–∞–Ω–Ω—è—Ö. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")


if __name__ == "__main__":
    main()
